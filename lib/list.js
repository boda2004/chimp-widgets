// Generated by CoffeeScript 1.12.7
(function() {
  var List, Widget,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Widget = require('./widget');

  List = (function(superClass) {
    extend(List, superClass);

    List.prototype.widgets = null;

    List.prototype.itemSelector = null;

    List.prototype._nestedItemsSelector = null;

    function List(selector, itemSelector, driver, widget) {
      this._wrapAsWidgets = bind(this._wrapAsWidgets, this);
      List.__super__.constructor.call(this, selector, driver);
      this.Widget = widget != null ? widget : Widget;
      if (itemSelector != null) {
        this.itemSelector = itemSelector;
      }
      this._nestedItemsSelector = this.selector + " " + this.itemSelector;
      this.widgets = this._wrapAsWidgets(this.driver.elements(this._nestedItemsSelector).value);
    }

    List.prototype.findWhere = function(filter) {
      var i, len, ref, widget;
      ref = this.widgets;
      for (i = 0, len = ref.length; i < len; i++) {
        widget = ref[i];
        if (filter(widget)) {
          return widget;
        }
      }
    };

    List.prototype.findByText = function(text) {
      return this.findWhere((function(_this) {
        return function(widget) {
          if (widget.hasText(text)) {
            return widget;
          }
        };
      })(this));
    };

    List.prototype.map = function(mapper) {
      return this.widgets.map(mapper);
    };

    List.prototype._wrapAsWidgets = function(elements) {
      return elements.map((function(_this) {
        return function(element, index) {
          return new _this.Widget(_this._nestedItemsSelector + ":nth-child(" + (index + 1) + ")");
        };
      })(this));
    };

    return List;

  })(Widget);

  module.exports = List;

}).call(this);
